#NodeMUC code in C++





#include<Servo.h>
#include <ESP8266WiFi.h>
#include <ESP8266WebServer.h>

const char* ssid = "madhu";
const char* password = "madhu123"; 
uint8_t pir_pin = D0;
uint8_t temp_pin = A0;
uint8_t fan_pin = D5; 
int ENA = D1;
int ENA2 = D5;
int IN1 = D3;
int IN2 = D2;
int IN12 = D6;
int IN22 = D7;
int motion=0;
int temp=0;
int force=0;
int light_on=0;
int fan_on=0;
int window_open=0;
ESP8266WebServer server(80);

Servo servo;


 void setup()  
 {  
   Serial.begin(9600);   
   delay(100);

  Serial.println("Connecting to ");
  Serial.println(ssid);

  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
  delay(1000);
  Serial.print(".");
  }
  Serial.println("");
  Serial.println("WiFi connected..!");
  Serial.print("Got IP: ");  
  Serial.println(WiFi.localIP());

  server.on("/", handle_OnConnect);
  server.on("/lightson", on_the_light);
  server.on("/lightsoff", off_the_light);
  
  server.onNotFound(handle_NotFound);

  server.begin();
  Serial.println("HTTP Server Started");
   
   servo.attach(D4);
   servo.write(180);
   pinMode(pir_pin,INPUT);
   pinMode(temp_pin,INPUT);
   pinMode(fan_pin,OUTPUT);
pinMode(ENA, OUTPUT);
pinMode(ENA2, OUTPUT);
pinMode(IN1, OUTPUT);
pinMode(IN2, OUTPUT);
pinMode(IN12, OUTPUT);
pinMode(IN22, OUTPUT);
 }  
 
 void loop()   
 {  
  
  server.handleClient();
  motion=digitalRead(pir_pin);
  temp=analogRead(temp_pin);

  if(temp>120){
    servo.write(0);
    window_open=1;
    if(temp>140){
      fan_on=1;
      Serial.println("fan on"); 
      digitalWrite(IN1, HIGH);
digitalWrite(IN2, LOW);
 analogWrite(ENA, 255);
    }else{
      digitalWrite(IN1, LOW);
digitalWrite(IN2, LOW);
      fan_on=0;
    }
  }else{
    servo.write(180);
digitalWrite(IN1, LOW);
digitalWrite(IN2, LOW);
      fan_on=0;
    window_open=0;
  }
  if(light_on==1){
  digitalWrite(IN12, HIGH);
digitalWrite(IN22, LOW);
analogWrite(ENA2, 255);
  }else{
    digitalWrite(IN12, LOW);
digitalWrite(IN22, LOW);
analogWrite(ENA2, 255);
  }
  } 
  
void handle_OnConnect() {
  server.send(200, "text/html", updateWebpage()); 
}
void off_the_light() {
  light_on=0;
  server.send(200, "text/html", updateWebpage()); 
}
void on_the_light() {
  light_on=1;
  server.send(200, "text/html", updateWebpage()); 
}
void handle_NotFound(){
  server.send(404, "text/plain", "Not found");
}
String updateWebpage(){
  String ptr = String(temp)+","+String(motion)+","+String(fan_on)+","+String(light_on)+","+String(window_open);
  return ptr;
}

  